#!/usr/bin/perl

use POSIX;
use Switch;
use LWP::UserAgent;

=pod
=cut


&check_env;
if($APISLA_HOME){
	&init;
	print "==================== container SLA ==================== \n";
	$apisla_log_index = 0;
	$container_flag = 1;
	foreach(@container_array){
		print "***** $_ ***** \n";
		if(uc($_) eq uc('null')){
			print "***** there's no container log need to be analysis ***** \n";
			$container_flag = 0;
			last;
		}
		$apisla_log_index++;
		@fields_ = split /:/, $_;
		$container_log_path = $fields_[0];
		$sysID = $fields_[1];
		$curosr_log_file = $APISLA_HOME."/apisla_container.".$apisla_log_index.".log";
		&do_container_sla;
	}
	
	print "==================== application SLA ==================== \n";
	$apisla_log_index = 0;
	$app_flag = 1;
	foreach(@app_array){
		print "***** $_ ***** \n";
		if(uc($_) eq uc('null')){
			print "***** there's no application log need to be analysis ***** \n";
			$app_flag = 0;
			last;
		}
		$apisla_log_index++;
		@fields_ = split /:/, $_;
		$application_log_path = $fields_[0];
		$sysID = $fields_[1];
		$curosr_log_file = $APISLA_HOME."/apisla_app.".$apisla_log_index.".log";
		&do_app_sla;
	}
	
	print "==================== SLA JSON ==================== \n";
	&cal_result;
	&send_result;
	&release_resource;
	
}

sub do_container_sla{
	if(&read_container_log){
		&analysis_container_log;
		&save_slalog;
		$container_flag = 1;
	}else{
		$container_flag = 0;
		&del_slalog;
		print "can not find container log file : $container_log_file\n";
	}	
}

sub do_app_sla{
	if(&read_app_log){
		&analysis_app_log;
		&save_slalog;
		$app_flag = 1;
	}else{
		$app_flag = 0;
		&del_slalog;
		print "can not find app log file : $application_log_file\n";
	}
}

#检查ENV
sub check_env{
	$APISLA_HOME = $ENV{"APISLA_HOME"};
	if(!$APISLA_HOME ){
		print "please set APISLA_HOME \n";
	}
	print "APISLA_HOME : $APISLA_HOME \n";
}

#INIT
sub init{

	$APIS = "";
	$sysID = "";
	$sla_server_url = "";
	%api_hash = ();
	%resultSla = ();
	@container_array = ();
	@app_array = ();
	@container_json_array = ();
	@app_json_array = ();

	$SLA500 = 0.5;
	$SLA800 = 0.8;
	$SLA995 = 0.995;
	$SLA999 = 0.999;

	&init_time;
	&init_props;
	&init_apis;

}

sub init_time{
	$start =  time();
	$current_time = strftime("%Y-%m-%d.%H",localtime( $start ));
	$current_time_str = strftime("%Y-%m-%d %H:%M",localtime( $start - 60 ));
	print "current_time ".$current_time . "\n";
	print "current_time_str ".$current_time_str . "\n";
}

sub init_props{
	$properties_file = $APISLA_HOME."/apisla.properties";
	open(PROPS,"<",$properties_file) || die "cannot open the file: \n";
	@props=<PROPS>;
	chomp($props[0]);
	chomp($props[1]);
	chomp($props[2]);
	@container_array = split /\s+/ , $props[0];
	@app_array = split /\s+/ , $props[1];
	$sla_server_url = $props[2];
	
}

sub init_apis{
	$apis_file = $APISLA_HOME."/apis.txt";
	open(APIS,"<",$apis_file) || die "cannot open the file: \n";
	my $api_tmp = "";
	while(<APIS>){
		if(!( $_ =~ /^\s*$/ ) ){
		chomp($_);
		my @fields = split;
		my $api = $fields[0];
		$api =~ s/(^\s+)|(\s+)$//g ;
		my $apiId = $fields[1];
		$apiId =~ s/(^\s+)|(\s+)$//g ;
		my $sysId = $fields[2];
		$sysId =~ s/(^\s+)|(\s+)$//g ;

		$api_hash{$sysId.":".$api} = $apiId;
	
		#判断API URL是否通配格式
		if( $api =~ /^\S*\.\*$/ ){
			$api = substr($api,0,rindex($api,"."));
		}
		$api =~ s/\//\\\//g;
		$api =~ s/\?/\\\?/g;
		$api =~ s/\+/\\\+/g;
		$api =~ s/\*/\\\*/g;
		$api =~ s/\^/\\\^/g;
		$api =~ s/\$/\\\$/g;
		$api =~ s/\|/\\\|/g;
		$api =~ s/\[/\\\[/g;
		$api =~ s/\]/\\\]/g;
		$api =~ s/\{/\\\{/g;
		$api =~ s/\}/\\\}/g;
		$api =~ s/\(/\\\(/g;
		$api =~ s/\)/\\\)/g;
		
		$api_tmp = $api_tmp."|".$api;
		}
	}
	$APIS = substr($api_tmp,1);
}

#读日志文件
sub read_container_log{
	@slalog = &get_slalog;
	$cursor = $slalog[0];
	$timestamp = $slalog[1];
	chomp($cursor);
	chomp($timestamp);
	if(!$cursor){
		$cursor = 0;
	}
	if(!$timestamp){
		$timestamp = $current_time;
	}

	$container_log_file = $container_log_path ."/access_log.".$timestamp.".txt";
	if(-e $container_log_file){
		print "container_log_file :".$container_log_file ." cursor : ".$cursor."\n";
		open(FILE1,"<",$container_log_file) || die "can't read 'log_file' $!" ;
		return 1;
	}else{
		return 0;
	}
	
}

#读日志文件
sub read_app_log{
	@slalog = &get_slalog;
	$cursor = $slalog[0];
	$timestamp = $slalog[1];
	chomp($cursor);
	chomp($timestamp);
	if(!$cursor){
		$cursor = 0;
	}
	if(!$timestamp){
		$timestamp = $current_time;
	}

	$application_log_file = $application_log_path."/dailylog.".$timestamp;
	if(-e $application_log_file){
		print "application_log_file :".$application_log_file ." cursor : ".$cursor."\n";
		open(FILE2,"<",$application_log_file) || die "can't read 'log_file' $!" ;
		return 1;
	}else{
		return 0;
	}
	
}


#解析容器日志文件
sub analysis_container_log{
	
	my %result = ();
	my $index_r = 0;
	%resultSla = ();
	$linecount = 0;
	while(<FILE1>){
		$linecount++;
		$index_r++;
		if($index_r > $cursor){
			if( $_  =~ /$APIS/){
				my @fields = split;
				#$fields[0],"记录时间",$fields[1],"APIURL",$fields[2]."API耗时";
				my $key = $fields[1];
				if($key =~ /^\S*\;/){
					$key = substr($key,0,rindex($key,";"));
				}
				$result{$key}{"total"} += 1;
				$result{$key}{"stattype"} = "provider";

				if( exists $resultSla{$key} ){
					
					push (@{$resultSla{$key}}, $fields[2]);
				}else{
					my $array = [];
					push (@$array, $fields[2]);
					$resultSla{$key} = $array;
				}
			}
		}
	}
	my $json = &handle_log(%result);
	#print "===========json1 \n";print "$json \n";
	push @container_json_array , $json;
}

#解析程序日志文件
sub analysis_app_log{
	
	my %result = ();
	my $index_r = 0;
	%resultSla = ();
	$linecount = 0;
	while(<FILE2>){
		$linecount++;
		$index_r++;
		if($index_r > $cursor){
			if( $_  =~ /API-SLA-ANALYSIS/i){
				#print $_;
				my $key = "";
				if($_ =~ /APIURL=(\S+) /i){
					my $pair = $&;
					$pair =~ s/\s+$//g ;
					my @fields  = split  /=/ , $pair;
					my @field_url = ();
					my $ind = 0;
					foreach(@fields){
						if($ind >= 1){
							push (@field_url, $_);
						}
						$ind++;
					}
					my $url = join "=" , @field_url;
					$key = $url;
					$result{$key}{"total"} += 1;
					
					if($_ =~ /RESPONSETIME=(\w+) /i){
						my $pair = $&;
						my @fields  = split  /=/ , $pair;
						chomp($fields[1]);
						$fields[1] =~ s/\s+$//g ;
						if( exists $resultSla{$key} ){
							push (@{$resultSla{$key}}, $fields[1]);
						}else{
							my $array = [];
							push (@$array, $fields[1]);
							$resultSla{$key} = $array;
						}
					}
					if($_ =~ /SUCCESSFLAG=(\w+) /i){
						my $pair = $&;
						my @fields  = split  /=/ , $pair;
						chomp($fields[1]);
						$fields[1] =~ s/\s+$//g ;
						if(uc($fields[1]) eq uc("true")){
							$result{$key}{"success"} += 1;
						}else{
							$result{$key}{"fail"} += 1;
						}
					}
					if($_ =~ /STATTYPE=(\w+) /i){
						my $pair = $&;
						my @fields  = split  /=/ , $pair;
						chomp($fields[1]);
						$fields[1] =~ s/\s+$//g ;
						if(uc($fields[1]) eq uc("provider")){
							$result{$key}{"stattype"} = "provider";
						}else{
							$result{$key}{"stattype"} = "consumer";
						}
					}
				}
				
			}
		}
	}
	
	my $json = &handle_log(%result);
	#print "===========json2 \n";print "$json \n";
	push @app_json_array , $json;
}


#处理结果格式
sub handle_log{
	
	my(%result_) = @_;
	
	my $json= '{ "apisla" : [ ';	
	
	if(%result_){
		foreach my $key1 (keys %result_){
			my $hash2 = $result_{$key1};
			my %hash3 = %$hash2;

			my @sortedsla = sort {$a <=> $b} @{$resultSla{$key1}};
			my $total_ = $hash3{"total"};

			$hash3{"sla500"} = $sortedsla[ (POSIX::ceil ($total_ * $SLA500)) - 1  ];	
			$hash3{"sla800"} = $sortedsla[ (POSIX::ceil ($total_ * $SLA800)) - 1  ];
			$hash3{"sla995"} = $sortedsla[ (POSIX::ceil ($total_ * $SLA995)) - 1  ];
			$hash3{"sla999"} = $sortedsla[ (POSIX::ceil ($total_ * $SLA999)) - 1  ];

			my $json_ = '{"apiurl" : '.'"'."$key1".'",';
			my $json_1 = '';
			foreach my $key2 ( keys %hash3){
				my $json_2 = '"'.$key2.'"'.' : '.'"'.$hash3{$key2}.'",';
				$json_1 = $json_1.$json_2;
			}
			$json_1 = substr($json_1,0,rindex($json_1,","));
			my $apiID = "0";
			if(exists $api_hash{$sysID.":".$key1}){
				$apiID = $api_hash{$sysID.":".$key1};
			}else{
				my $key_tmp = $key1;
				if($key1 =~ /^\S*\./){
					$key_tmp = substr($key1,0,rindex($key1,"."));
				}
				if($key1 =~ /^\S*\;/){
					$key_tmp = substr($key1,0,rindex($key1,";"));
				}
				$key_tmp = $key_tmp.".*";
				if(exists $api_hash{$sysID.":".$key_tmp}){
					$apiID = $api_hash{$sysID.":".$key_tmp};
				}
			}
			
			$json_ = $json_ . $json_1 . ',"apiId":"'.$apiID.'" ,"sysId":"'.$sysID.'" },';
			$json  = $json . $json_ ;
		}
		$json = substr($json,0,rindex($json,","));
	}
	$json  = $json . ' ] }';
	return $json;
	
}

sub cal_result{
	$container_json= '{ "timestamp": "'.$current_time_str.'", "result" : [ ';
	$container_json_array_length = 0;
	foreach(@container_json_array){
	$container_json_array_length++;
	$container_json = $container_json.$_." , ";
	}
	if($container_json_array_length > 0){
	$container_json = substr($container_json,0,rindex($container_json,","));
	$container_json  = $container_json . ' ] }';
	}else{
	   $container_json = '{}';
	}
	print "\n";
	#print "$container_json\n";

	$app_json = '{ "timestamp": "'.$current_time_str.'", "result" : [ ';
	$app_json_array_length = 0;
	foreach(@app_json_array){
	  $app_json_array_length++;
	  $app_json = $app_json.$_." , ";
	}
	if($app_json_array_length > 0){
	   $app_json = substr($app_json,0,rindex($app_json,","));
	   $app_json  = $app_json . ' ] }';
	}else{
	   $app_json = '{}';
	}
	print "\n";
	#print "$app_json\n";
}

#发送
sub send_result{
 	my $ua = LWP::UserAgent->new;
	$ua->timeout(20);
 
	my $server_endpoint = $sla_server_url;
	my $resp = $ua->post($server_endpoint,{'sla'=> $container_json,'app_sla'=> $app_json });
	if ($resp->is_success) {
	    my $message = $resp->decoded_content;
	    print "Received reply: $message\n";
	}
	else {
	    print "HTTP POST error code: ", $resp->code, "\n";
	    print "HTTP POST error message: ", $resp->message, "\n";
	}
	print "\n";
}

#得到上一次截至行的游标
sub get_slalog{
	my @linelist= ();
	print "curosr_log_file $curosr_log_file \n";
	if(-e $curosr_log_file){
		open(CURSOR,"<",$curosr_log_file) || die "cannot open the file: \n";
		@linelist=<CURSOR>;
	}
	return @linelist;
}

#保存本次最后一行的行号到游标
sub save_slalog{
	open CURSOR_OUT , ">" ,$curosr_log_file;
	if( $current_time eq $timestamp ){
		print CURSOR_OUT $linecount."\n";
		print CURSOR_OUT $timestamp;
	}else{
		print CURSOR_OUT "0\n";
		print CURSOR_OUT $current_time;
	}
}

sub del_slalog{
	unlink $curosr_log_file;
}

sub release_resource{
	close CURSOR;
	close CURSOR_OUT;
	close FILE1;
	close FILE2;
	close APIS;
	close PROPS;
	$end = time();
	print 'cost time : '.($end-$start)," s\n";
}

